{"ast":null,"code":"import { put, call, takeLatest, all } from '@redux-saga/core/effects';\nimport shopActionTypes from './shop.types';\nimport { convertCollectionSnapshotToMap, firestore } from '../../firebase/firebase.utils';\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  yield console.log('i am fired');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n  /*collectionRef\n      .get()\n      .then(snapshot => {\n          const collectionMap = convertCollectionSnapshotToMap(snapshot);\n          dispatch(fetchCollectionsSuccess(collectionMap));\n      })\n      .catch(error => dispatch(fetchCollectionsFailure(error.message)))*/\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(shopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/Users/nalezhytyi/Projects/react/e-commerce/client/src/redux/shop/shop.sagas.js"],"names":["put","call","takeLatest","all","shopActionTypes","convertCollectionSnapshotToMap","firestore","fetchCollectionsFailure","fetchCollectionsSuccess","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,0BAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,8BAAT,EAAyCC,SAAzC,QAA0D,+BAA1D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AACA,MAAI;AACA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMf,IAAI,CAACI,8BAAD,EAAiCS,QAAjC,CAAjC;AACA,UAAMd,GAAG,CAACQ,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACH,GALD,CAKE,OAAOC,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACO,uBAAuB,CAACU,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AAED;;;;;;;;AAOH;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMjB,UAAU,CAACE,eAAe,CAACgB,uBAAjB,EACZX,qBADY,CAAhB;AAGH;AAED,OAAO,UAAUY,SAAV,GAAsB;AACzB,QAAMlB,GAAG,CAAC,CACNF,IAAI,CAACkB,qBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { put, call, takeLatest, all } from '@redux-saga/core/effects';\nimport shopActionTypes from './shop.types';\nimport { convertCollectionSnapshotToMap, firestore } from '../../firebase/firebase.utils';\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from './shop.actions';\n\nexport function* fetchCollectionsAsync() {\n    yield console.log('i am fired');\n    try {\n        const collectionRef = firestore.collection('collections');\n        const snapshot = yield collectionRef.get();\n        const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n        yield put(fetchCollectionsSuccess(collectionsMap))\n    } catch (error) {\n        yield put(fetchCollectionsFailure(error.message))\n    }\n\n    /*collectionRef\n        .get()\n        .then(snapshot => {\n            const collectionMap = convertCollectionSnapshotToMap(snapshot);\n            dispatch(fetchCollectionsSuccess(collectionMap));\n        })\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)))*/\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeLatest(shopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    );\n}\n\nexport function* shopSagas() {\n    yield all([\n        call(fetchCollectionsStart)\n    ])\n}\n"]},"metadata":{},"sourceType":"module"}